# ============================================
# Discord Notion Voice Assistant Configuration
# ============================================
#
# Copy this file to .env and fill in your values
# DO NOT commit the .env file to version control
#

# --------------------------------------------
# Discord Configuration
# --------------------------------------------
# Your Discord bot token from https://discord.com/developers/applications
DISCORD_TOKEN=your_discord_bot_token_here

# Your Discord application client ID
DISCORD_CLIENT_ID=your_discord_client_id_here

# Optional: Guild ID for instant command registration (recommended for development)
# Leave empty for global commands (takes ~1 hour to propagate)
# You can get this by enabling Developer Mode in Discord and right-clicking your server
GUILD_ID=

# --------------------------------------------
# OpenAI Configuration
# --------------------------------------------
# Your OpenAI API key from https://platform.openai.com/api-keys
OPENAI_API_KEY=your_openai_api_key_here

# GPT model for intent parsing (default: gpt-4o-mini)
# Options: gpt-4, gpt-4-turbo, gpt-4o, gpt-4o-mini, gpt-3.5-turbo
OPENAI_MODEL_GPT=gpt-4o-mini

# Whisper model for transcription (default: whisper-1)
OPENAI_MODEL_WHISPER=whisper-1

# --------------------------------------------
# Notion OAuth Configuration
# --------------------------------------------
# Create an integration at https://www.notion.so/my-integrations
# Set it as "Public integration" for OAuth

# Your Notion OAuth client ID
NOTION_CLIENT_ID=your_notion_client_id_here

# Your Notion OAuth client secret
NOTION_CLIENT_SECRET=your_notion_client_secret_here

# OAuth redirect URI (must match the one in your Notion integration settings)
# For local development: http://localhost:3000/oauth/notion/callback
# For production: https://your-domain.com/oauth/notion/callback
NOTION_REDIRECT_URI=http://localhost:3000/oauth/notion/callback

# Notion API scopes (comma-separated, no spaces)
# Required scopes for full functionality
NOTION_SCOPES=read,update,insert,search

# --------------------------------------------
# Application Configuration
# --------------------------------------------
# Base URL of your application (used for generating OAuth links)
# For local: http://localhost:3000
# For production: https://your-domain.com
APP_BASE_URL=http://localhost:3000

# Port for the Express server
PORT=3000

# Docker runtime guard - DO NOT CHANGE THIS
# This MUST be set to "true" in the container environment
RUN_IN_DOCKER=true

# --------------------------------------------
# Security Configuration
# --------------------------------------------
# Encryption key for storing Notion tokens at rest (AES-256)
# Generate a secure 32-byte base64 key using:
#   Node.js: require('crypto').randomBytes(32).toString('base64')
#   OpenSSL: openssl rand -base64 32
#   Online: https://generate-random.org/encryption-key-generator (choose 256-bit)
#
# IMPORTANT: Keep this secret and never commit it to version control
# If you lose this key, all stored Notion tokens will become unrecoverable
ENCRYPTION_KEY=your_32_byte_base64_encryption_key_here

# --------------------------------------------
# Logging Configuration
# --------------------------------------------
# Log level (trace, debug, info, warn, error, fatal)
# Use "info" for production, "debug" for development
LOG_LEVEL=info

# --------------------------------------------
# Production Considerations
# --------------------------------------------
#
# For production deployment:
#
# 1. Use HTTPS with a valid SSL certificate
#    - Update NOTION_REDIRECT_URI to https://your-domain.com/oauth/notion/callback
#    - Update APP_BASE_URL to https://your-domain.com
#    - Use a reverse proxy (nginx, Caddy, Traefik) for TLS termination
#
# 2. Generate a strong, unique ENCRYPTION_KEY
#    - Store it securely (e.g., AWS Secrets Manager, HashiCorp Vault)
#    - Never expose it in logs or error messages
#
# 3. Use environment-specific values
#    - Different keys for dev/staging/prod
#    - Separate Discord bots for each environment
#
# 4. Secure your server
#    - Restrict network access (firewall, security groups)
#    - Keep Docker and dependencies updated
#    - Monitor logs for suspicious activity
#
# 5. Consider scaling
#    - For multiple servers, use Redis/PostgreSQL for token storage
#    - Implement Discord sharding for large bot deployments (>2500 guilds)
#
